#pragma checksum "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "59674b07876a8c030e36bd99d0dfbe83ba7e3377"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\_ViewImports.cshtml"
using NaturalDisasterDatabaseWebsite;

#line default
#line hidden
#line 2 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\_ViewImports.cshtml"
using NaturalDisasterDatabaseWebsite.Models;

#line default
#line hidden
#line 5 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\_ViewImports.cshtml"
using NaturalDisasterDatabaseWebsite.Controllers;

#line default
#line hidden
#line 1 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
using System.Security.Claims;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"59674b07876a8c030e36bd99d0dfbe83ba7e3377", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3a6d8d6a67f7ada271b014efa1a910242944a815", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/echarts/dist/echarts.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/echarts/extension/bmap.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/moment-with-locales.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap-datetimepicker/js/bootstrap-datetimepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery-table2excel/dist/jquery.table2excel.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("display:none;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "农作物生物灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "森林生物灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "地质灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "森林火灾", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "洪水灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "气象灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "海洋灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "地震灾害", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(37, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "首页";

#line default
#line hidden
            BeginContext(77, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "672d9742fb0e4ccb98c00a7577162906", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(130, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(132, 55, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "897959d946fc4d18b4997c29a04b08bd", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(187, 99, true);
            WriteLiteral("\r\n<script src=\"https://api.map.baidu.com/api?v=2.0&ak=b0tF4BlZ5Mrmo9DU71GDF6eFUvpAwNtB\"></script>\r\n");
            EndContext();
            BeginContext(286, 96, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c8971bc7762940d3a09fe7bcbc4f5968", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(382, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(384, 51, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "75a0477ae2764b219228ed80155c6a12", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(435, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(437, 85, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "173ea4cd3dfa4ac5848c6cd3f8c4a09d", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(522, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(524, 99, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "237fbd02e43f4286a28120e2666fe453", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(623, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(625, 75, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2fd7f8d49322496ea482bfd4f17277eb", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(700, 814, true);
            WriteLiteral(@"

<style>
    .carousel-inner {
        background: url(/images/banner4.jpg) no-repeat center center;
        background-size: 100% 100%;
    }

        .carousel-inner .item img[src$="".jpg""], .carousel-inner .item img[src$="".png""], .carousel-inner .item img[src$="".svg""] {
            width: 100%;
        }

        .img-responsive, .carousel-inner > .item > img {
            height: 360px;
            margin: 0 auto;
        }

    .carousel-caption p {
        font-size: 16px;
        letter-spacing: 2px;
        text-align-last: left;
        text-align: justify;
        text-justify: distribute-all-lines;
    }

        .carousel-caption p strong {
            font-size: 20px;
        }

    .row {
        margin-right: 0px;
        margin-left: 0px;
    }
</style>
");
            EndContext();
            BeginContext(1587, 2029, true);
            WriteLiteral(@"
<style>
    .col-md-9 {
        padding: 0;
    }

    .BMap_cpyCtrl {
        /*去掉底部百度版权字样*/
        display: none;
    }

    .anchorBL {
        /*去掉底部百度logo*/
        display: none;
    }

    .contentright {
        height: 600px;
        background: #f5fafb;
        float: right;
        padding-top: 15px;
    }

        .contentright .selectmap {
            padding-bottom: 30px;
            border-bottom: 1px dashed #999;
        }

        .contentright .timeright .timebox {
            padding-bottom: 15px;
            padding-top: 30px;
        }

        .contentright .timebox .addonicon {
            background: #f5fafb;
            color: #9ece26;
        }
        /*.contentright .form-control:focus {
        border:1px solid #ccc;
        outline:none;
        box-shadow: none;
        -webkit-box-shadow: none;
    }
    .contentright .btn:focus{
        border:1px solid #ccc;
        outline:none;
    }*/
        .contentright .timeform {
     ");
            WriteLiteral(@"       display: flex;
            justify-content: space-around;
            margin-top: 15px;
        }

    #cropmapdata td {
        padding: 5px 0;
    }

    .newsInfo:hover {
        background: #eee;
        color: #333;
        z-index: 999;
    }

    .newsInfo {
        position: relative;
        z-index: 0;
    }

        .newsInfo span {
            display: none;
        }

        .newsInfo:hover span {
            display: block;
            position: absolute;
            width: 700px;
            top: 0px;
            left: -248%;
            border: 1px solid #cccccc;
            background: #ddd;
            color: black;
            padding: 5px;
            text-align: left;
            overflow: hidden;
        }

    .newInfoTruncation {
        display: -webkit-box;
        width: 100%;
        overflow: hidden;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        cursor: pointer;
    }
</style>
");
            EndContext();
            BeginContext(3631, 920, true);
            WriteLiteral(@"<div class=""row"">
    <div class=""col-md-9"" style="""" id=""eightmap"">
        <div id=""cropmap"" style=""width: 100%; height: 600px;""></div>
        <div id=""forestmap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""geologymap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""firemap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""floodmap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""meteorologymap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""marinemap"" style=""width:100%; height:600px; display:none;""></div>
        <div id=""quakemap"" style=""width:100%; height:600px; display:none;""></div>
    </div>
    <div class=""col-md-3 contentright"">
        <div class=""selectmap"">
            显示不同灾害类别的数据到地图
            <select class=""form-control"" id=""eightselect"">
                ");
            EndContext();
            BeginContext(4551, 73, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3bf975f1ed244fecac1e3261b322c45c", async() => {
                BeginContext(4608, 7, true);
                WriteLiteral("请选择灾害类别");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4624, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4642, 40, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "89dd0397d4ab4a3bb04af169b2359074", async() => {
                BeginContext(4666, 7, true);
                WriteLiteral("农作物生物灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4682, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4700, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f136a0f917e04f6a855b73a6f7452426", async() => {
                BeginContext(4723, 6, true);
                WriteLiteral("森林生物灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4738, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4756, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "314a84d4726a46d78488dd0525003736", async() => {
                BeginContext(4777, 4, true);
                WriteLiteral("地质灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4790, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4808, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9b438558121c4c96a047acf5c2268e66", async() => {
                BeginContext(4829, 4, true);
                WriteLiteral("森林火灾");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4842, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4860, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "877600c619124c59a04b19e918a370a0", async() => {
                BeginContext(4881, 4, true);
                WriteLiteral("洪水灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4894, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4912, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "86f72db9968b4f55bd19a439febd19b5", async() => {
                BeginContext(4933, 4, true);
                WriteLiteral("气象灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4946, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(4964, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ee1b777126f4512a63fab6515beb7d4", async() => {
                BeginContext(4985, 4, true);
                WriteLiteral("海洋灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4998, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(5016, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8481fa77633c4a9898c419ee919e73e8", async() => {
                BeginContext(5037, 4, true);
                WriteLiteral("地震灾害");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5050, 109, true);
            WriteLiteral("\r\n            </select>\r\n        </div>\r\n        <div class=\"timeright\">\r\n            <div class=\"timebox\">\r\n");
            EndContext();
            BeginContext(5194, 571, true);
            WriteLiteral(@"                开始日期
                <div class=""input-group"">
                    <input type=""text"" style="""" id=""startDate"" name=""datetimepicker"" class=""form-control"" onfocus="""">
                    <span class=""input-group-addon addonicon"">
                        <span class=""glyphicon glyphicon-calendar""></span>
                    </span>
                </div>
                <br />
                结束日期
                <div class=""input-group"">
                    <input type=""text"" id=""endDate"" name=""datetimepicker"" class=""form-control"" onfocus=""""");
            EndContext();
            BeginWriteAttribute("value", " value=\"", 5765, "\"", 5809, 1);
#line 185 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
WriteAttributeValue("", 5773, DateTime.Now.ToString("yyyy-MM-dd"), 5773, 36, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(5810, 252, true);
            WriteLiteral(">\r\n                    <span class=\"input-group-addon addonicon\">\r\n                        <span class=\"glyphicon glyphicon-calendar\"></span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"timeform\">\r\n");
            EndContext();
#line 192 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
                 if (User.Identity.IsAuthenticated)
                {

#line default
#line hidden
            BeginContext(6134, 184, true);
            WriteLiteral("                    <button class=\"btn btn-default\" onclick=\"queryData();\">查询数据</button>\r\n                    <button class=\"btn btn-default\" onclick=\"displaytomap();\">显示到地图</button>\r\n");
            EndContext();
#line 196 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
                }
                else
                {

#line default
#line hidden
            BeginContext(6378, 202, true);
            WriteLiteral("                    <button class=\"btn btn-default\" onclick=\"isLogin()\" id=\"datablur\">查询数据</button>\r\n                    <button class=\"btn btn-default\" onclick=\"isLogin()\" id=\"mapblur\">显示到地图</button>\r\n");
            EndContext();
#line 201 "D:\bishe\NaturalDisasterDatabaseWebsite\NaturalDisasterDatabaseWebsite\Views\Home\Index.cshtml"
                }

#line default
#line hidden
            BeginContext(6599, 78, true);
            WriteLiteral("            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<i id=\'maodian\'></i>\r\n");
            EndContext();
            BeginContext(6693, 97, true);
            WriteLiteral("<div id=\"displaydata\" style=\"overflow-y:auto;height: 100%; width:100%; margin-top:15px;\"></div>\r\n");
            EndContext();
            BeginContext(6815, 724, true);
            WriteLiteral(@"<script>
    $(""#startDate"").datetimepicker({
        language: 'zh-CN',//显示中文
        forceParse: 0, //设置为0，时间不会跳转1899年
        //format: 'yyyy-mm-dd hh:ii:ss',// 设置只显示到月份
        format: 'yyyy-mm-dd',// 设置只显示到月份
        autoclose: true, //选中自动关闭
        todayBtn: true, //显示今天按钮
        endDate: new Date(),
        //minView: ""month"",
        minView: 2, //0 hour, 1 day, 2 month, 3 year ,4 decade
        //maxView:1,
        //pickerPosition: ""bottom""
    })
    $(""#endDate"").datetimepicker({
        language: 'zh-CN',
        forceParse: 0,
        format: 'yyyy-mm-dd',
        autoclose: true,
        todayBtn: true,
        minView: ""month"",
        endDate: new Date(),
    })
</script>
");
            EndContext();
            BeginContext(7550, 3789, true);
            WriteLiteral(@"<script>
    $(() => {
        $(""#eightselect"").change(() => {
            var chooseVal = $(""#eightselect"").val();
            switch (chooseVal) {
                case ""森林生物灾害"":
                    $(""#forestmap"").show();
                    $(""#cropmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapforest();
                    break;
                case ""地质灾害"":
                    $(""#geologymap"").show();
                    $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapge");
            WriteLiteral(@"ology();
                    break;
                case ""森林火灾"":
                    $(""#firemap"").show();
                    $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapfire();
                    break;
                case ""洪水灾害"":
                    $(""#floodmap"").show();
                    $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#firemap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapflood();
                    break;
                case ""气象灾害"":
                    $(""#meteorologymap"").show();
     ");
            WriteLiteral(@"               $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapmeteorology();
                    break;
                case ""海洋灾害"":
                    $(""#marinemap"").show();
                    $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#quakemap"").hide();
                    mapmarine();
                    break;
                case ""地震灾害"":
                    $(""#quakemap"").show();
                    $(""#cropmap"").hide();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").h");
            WriteLiteral(@"ide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    mapquake();
                    break;
                default:
                    $(""#cropmap"").show();
                    $(""#forestmap"").hide();
                    $(""#geologymap"").hide();
                    $(""#firemap"").hide();
                    $(""#floodmap"").hide();
                    $(""#meteorologymap"").hide();
                    $(""#marinemap"").hide();
                    $(""#quakemap"").hide();
                    mapcrop();
            }
        });
    });
</script>
");
            EndContext();
            BeginContext(11348, 15800, true);
            WriteLiteral(@"<script>
    mapcrop();
    function mapcrop() {
        var mychinaCharts = echarts.init(document.getElementById('cropmap'));
        mychinaCharts.clear();//用于清除已存在的内容
        mychinaCharts.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetCropMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var croptime = [], croploss = [], placeloss = [], longitude = [], dimension = [], cropstyle = [], croparea = [], placejwdu = [];
                    for (var i = 0; i < response.cropdlist.length; i++) {
                        croptime[i] = response.cropdlist[i].croptime;
                        croploss[i] = response.cropdlist[i].croploss;
                        placeloss[i + 1] = [response.cropdlist[i].cropplace, croploss.map(Number)[i]];
                ");
            WriteLiteral(@"        longitude[i] = response.cropdlist[i].croplongitude;
                        dimension[i] = response.cropdlist[i].cropdimension;
                        cropstyle[i] = response.cropdlist[i].cropstyle;
                        croparea[i] = response.cropdlist[i].croparea;
                        placejwdu[i] = [longitude.map(Number)[i], dimension.map(Number)[i]];
                    }
                    placeloss[0] = ['name', 'value'];
                    //console.log(placejwdu)
                    //数组-》json对象
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    //定义每个位置需要显示的量的值
         ");
            WriteLiteral(@"           var data = formatJson(placeloss);
                    //console.log(data);
                    var objlongdimen = [];
                    for (var j = 0; j < placejwdu.length; j++) {
                        objlongdimen[data[j].name] = placejwdu[j];
                    }

                    //定义需要显示对应信息的位置坐标，按照[经度，维度]的格式
                    //[经度，维度]
                    var geoCoordMap = objlongdimen;
                    //console.log(geoCoordMap.北海)
                    //将坐标信息和对应物理量的值合在一起
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
         ");
            WriteLiteral(@"                           //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    mychinaCharts.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
                            formatter: function (e) {
                                //console.log(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + croptime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + cropstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />受灾面积："" + croparea[e.dataIndex] + "" 公顷"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108");
            WriteLiteral(@".282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                },/* {
                                    'featureType': 'railway', //铁路
         ");
            WriteLiteral(@"                           'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
              ");
            WriteLiteral(@"                      'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                           ");
            WriteLiteral(@"         'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
   ");
            WriteLiteral(@"                                 }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202',
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                 ");
            WriteLiteral(@"                   }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },
                        //热力图
                        //visualMap: {
                        //    show: false,
                        //    top: 'top',
                        //    min: 0,
                        //    max: 5,
                        // ");
            WriteLiteral(@"   seriesIndex: 0,
                        //    calculable: true,
                        //    inRange: {
                        //        color: ['blue', 'blue', 'green', 'yellow', 'red']
                        //        //color: ['#d94e5d', '#eac736', '#50a3ba'].reverse()
                        //    }
                        //},
                        series: [
                            {
                                name: 'test',
                                type: 'effectScatter',
                                //type: 'heatmap',
                                //type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    return val[2] / 15;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                          ");
            WriteLiteral(@"          brushType: 'stroke'
                                },
                                hoverAnimation: true,
                                //symbol: 'pin',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                //symbolSize: [50, 50],
                                //label: {
                                //    normal: {
                                //        formatter: '{b}',
                                //        position: 'right',
                                //        show: true,
                                //        fontSize: 10
                                //    }
                                //},
                                label: {
                                    normal: {
                                        show: true,
                                        textStyle: {
                                            color: '#fff',
                                            fontSize: 9");
            WriteLiteral(@",
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        color: 'rgba(3,247,134,1)',
                                        shadowBlur: 2,
                                        shadowColor: '#333'
                                    }
                                },
                            },
                            {
                                name: 'Top 5',
                                type: 'scatter',
                                tooltip: { show: false },
                                coordinateSystem: 'bmap',
                                data: convertData(data.sort(function (a, b) {
               ");
            WriteLiteral(@"                     return b.value - a.value;
                                }).slice(0, 5)),
                                symbolSize: function (val) {
                                    return val[2] / 20;
                                },
                                label: {
                                    normal: {
                                        show: true,
                                        textStyle: {
                                            color: '#fff',
                                            fontSize: 9,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        color: {
                    ");
            WriteLiteral(@"                        type: 'linear',
                                            x: 0,                 // 左上角x
                                            y: 0,                 // 左上角y
                                            x2: 0,                // 右下角x
                                            y2: 1,                // 右下角y
                                            colorStops: [{
                                                offset: 0, color: 'rgba(93,214,245,0.76)' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'rgba(90,214,245,0.88)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                        shadowBlur: 10,
                                        shadowColor: '#333'
                                    }
                                },
         ");
            WriteLiteral(@"                       zlevel: 1
                            }
                        ]
                    };
                    mychinaCharts.setOption(option);

                    // 获取百度地图实例，使用百度地图自带的控件：热力图
                    //var bmap = myChart.getModel().getComponent('bmap').getBMap();
                    //bmap.addControl(new BMap.MapTypeControl());

                }
            })
        })
    }
</script>
");
            EndContext();
            BeginContext(27156, 12903, true);
            WriteLiteral(@"<script type=""text/javascript"">
    function mapforest() {
        var myMapCharts = echarts.init(document.getElementById('forestmap'));
        myMapCharts.clear();//用于清除已存在的内容
        myMapCharts.showLoading();

        /*
        跨越问题解决
        方法一：可以弃用$.getJSON方法,把json的内容直接复制到代码中，替换 echarts.registerMap('广西', geoJson);
        中的geoJson变量。
        方法二：把代码放tomcat中
        */
        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetForestMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var foresttime = [], forestplacearea = [], forestplacejwdu = [], forestloss = [], foreststyle = [], forestarea = [];
                    for (var i = 0; i < response.forestdlist.length; i++) {
                        foresttime[i] = response.forestdlist[i].foresttime;
                ");
            WriteLiteral(@"        forestplacearea[i + 1] = [response.forestdlist[i].forestplace, response.forestdlist[i].forestarea];
                        forestplacejwdu[i] = [response.forestdlist[i].forestlogitude, response.forestdlist[i].forestdimension];
                        forestloss[i] = response.forestdlist[i].forestloss;
                        foreststyle[i] = response.forestdlist[i].foreststyle;
                        forestarea[i] = response.forestdlist[i].forestarea;
                    }
                    forestplacearea[0] = ['name', 'value'];
                    //console.log(placejwdu)
                    //数组-》json对象
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
      ");
            WriteLiteral(@"                  return json
                    }
                    //定义每个位置需要显示的量的值
                    var data = formatJson(forestplacearea);
                    //console.log(data);
                    var forestlongdimen = [];
                    for (var j = 0; j < forestplacejwdu.length; j++) {
                        forestlongdimen[data[j].name] = forestplacejwdu[j];
                    }

                    //定义需要显示对应信息的位置坐标，按照[经度，维度]的格式
                    //[经度，维度]
                    var geoCoordMap = forestlongdimen;
                    //console.log(geoCoordMap.北海)
                    //将坐标信息和对应物理量的值合在一起
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                               ");
            WriteLiteral(@"     name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myMapCharts.hideLoading();
                    option = {
                        tooltip: {
                            show: true,
                            trigger: 'item',
                            formatter: function (params) {
                                return '<p style=""text-align:center;margin-bottom:0;"">' + params.name + '</p>发生时刻：' + foresttime[params.dataIndex].replace(""T"", "" "") + ""<br />灾害类型："" + foreststyle[params.dataIndex] + ""<br />经济损失："" + forestloss[params.dataIndex] + "" 万元<br />受灾面积："" + params.value[2] + "" 公顷"";
                            }
                        },

        ");
            WriteLiteral(@"                bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
     ");
            WriteLiteral(@"                               }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
            ");
            WriteLiteral(@"                        }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
 ");
            WriteLiteral(@"                                   'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                     ");
            WriteLiteral(@"               'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    ");
            WriteLiteral(@"'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },
                        //热力图
                        visualMap: {
                            min: 0,
       ");
            WriteLiteral(@"                     max: 90000,
                            splitNumber: 5,
                            seriesIndex: 0,
                            calculable: true,
                            inRange: {
                                color: ['orange', '#86031A', 'blue', '#d94e5d', 'green', '#eac736', 'red', '#50a3ba', 'yellow'].reverse()
                            },
                            textStyle: {
                                color: '#333'
                            }
                        },
                        series: [
                            {
                                name: 'test',
                                type: 'heatmap',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                            },
                            {
                                name: '散点',
                                type: 'scatter',
                                coordinateSystem: 'bmap'");
            WriteLiteral(@",
                                data: convertData(data),
                                symbolSize: function (val) {
                                    return (Math.log2(val[2] / 1000));
                                },
                                itemStyle: {
                                    normal: {
                                        color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                                            colorStops: [{
                                                offset: 0, color: '#FADBDB' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'blue' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                        ");
            WriteLiteral(@"                },
                                        shadowBlur: 5,
                                        shadowColor: '#333'
                                    }
                                },
                            },
                        ]
                    };
                    myMapCharts.setOption(option);

                    // 获取百度地图实例，使用百度地图自带的控件
                    //var bmap = myMapCharts.getModel().getComponent('bmap').getBMap();
                    //bmap.addControl(new BMap.MapTypeControl());
                }
            })
        })
    }
</script>
");
            EndContext();
            BeginContext(40067, 12451, true);
            WriteLiteral(@"<script>
    function mapgeology() {
        var myGeologymap = echarts.init(document.getElementById('geologymap'));
        myGeologymap.clear();//用于清除已存在的内容
        myGeologymap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetGeologyMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var geologytime = [], geologyloss = [], geologycasualty = [], geologystyle = [], geologyarea = [], gplacejwdu = [], geologylevel = [];
                    for (var i = 0; i < response.geologydlist.length; i++) {
                        geologytime[i] = response.geologydlist[i].geologytime;
                        geologyloss[i] = response.geologydlist[i].geologyloss;
                        geologystyle[i] = response.geologydlist[i].geologystyle;
                     ");
            WriteLiteral(@"   geologyarea[i] = response.geologydlist[i].geologyarea;
                        geologylevel[i] = response.geologydlist[i].geologylevel;

                        geologycasualty[i + 1] = [response.geologydlist[i].geologyplace, response.geologydlist[i].geologycasualty];
                        gplacejwdu[i] = [response.geologydlist[i].geologylogitude, response.geologydlist[i].geologydimension];
                    }
                    geologycasualty[0] = ['name', 'value'];
                    //console.log(placejwdu)
                    //数组-》json对象
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
             ");
            WriteLiteral(@"       //定义每个位置需要显示的量的值
                    var data = formatJson(geologycasualty);
                    //console.log(data);
                    var glongdimen = [];
                    for (var j = 0; j < gplacejwdu.length; j++) {
                        glongdimen[data[j].name] = gplacejwdu[j];
                    }

                    //定义需要显示对应信息的位置坐标，按照[经度，维度]的格式
                    //[经度，维度]
                    var geoCoordMap = glongdimen;
                    //console.log(geoCoordMap.北海)
                    //将坐标信息和对应物理量的值合在一起
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k]");
            WriteLiteral(@".value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myGeologymap.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
                            formatter: function (e) {
                                //console.log(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + geologytime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + geologystyle[e.dataIndex] + ""<br />伤亡人数："" + e.value[2] + "" 人<br />灾害级别："" + geologylevel[e.dataIndex] + ""<br />经济损失："" + geologyloss[e.dataIndex] + "" 万元<br />受灾面积："" + geologyarea[e.dataIndex] + "" 公顷"";
                            }
                        },
                        bmap");
            WriteLiteral(@": { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                         ");
            WriteLiteral(@"           }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                ");
            WriteLiteral(@"    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                     ");
            WriteLiteral(@"               'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elem");
            WriteLiteral(@"entType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all'");
            WriteLiteral(@",
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },

                        series: [
                            {
                                name: 'test',
                  ");
            WriteLiteral(@"              type: 'effectScatter',
                                //type: 'heatmap',
                                //type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    return val[2] / 100;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                                    brushType: 'stroke'
                                },
                                hoverAnimation: true,
                                symbol: 'pin',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                symbolSize: [50, 50],
                                label: {
                                    normal: {
                                        show: true,
                                ");
            WriteLiteral(@"        textStyle: {
                                            color: '#fff',
                                            fontSize: 9,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        color: '#F28903',
                                        shadowBlur: 2,
                                        shadowColor: '#333'
                                    }
                                },
                            },
                        ]
                    };
                    myGeologymap.setOption(option);

                    // 获取百度地图实例，使用百度地图自带的控件：热力图
                    //var bmap = myGeologymap.getModel().ge");
            WriteLiteral("tComponent(\'bmap\').getBMap();\r\n                    //bmap.addControl(new BMap.MapTypeControl());\r\n                }\r\n            })\r\n        })\r\n    }\r\n</script>\r\n");
            EndContext();
            BeginContext(52526, 15665, true);
            WriteLiteral(@"<script>
    function mapfire() {
        var myFireMap = echarts.init(document.getElementById('firemap'));
        myFireMap.clear();//用于清除已存在的内容
        myFireMap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetFireMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    var firetime = [], fplaceloss = [], fireloss = [], fireslevel = [], firearea = [], fplacejwdu = [];
                    for (var i = 0; i < response.firedlist.length; i++) {
                        firetime[i] = response.firedlist[i].firetime;
                        fireloss[i] = response.firedlist[i].fireloss;
                        fireslevel[i] = response.firedlist[i].fireslevel;
                        firearea[i] = response.firedlist[i].firearea;
                        fplaceloss[i + 1] = [response.firedlist[i].fireplace,");
            WriteLiteral(@" response.firedlist[i].firecasualty];
                        fplacejwdu[i] = [response.firedlist[i].firelogitude, response.firedlist[i].firedimension];
                    }
                    fplaceloss[0] = ['name', 'value'];
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    var data = formatJson(fplaceloss);
                    var flongdimen = [];
                    for (var j = 0; j < fplacejwdu.length; j++) {
                        flongdimen[data[j].name] = fplacejwdu[j];
                    }

                    var geoCoordMap = flongdimen;
                    var convertData = f");
            WriteLiteral(@"unction (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myFireMap.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
                            formatter: function (e) {
                                //console.log(e)
                                re");
            WriteLiteral(@"turn '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + firetime[e.dataIndex].replace(""T"", "" "") + '<br />灾害级别：' + fireslevel[e.dataIndex] + ""<br />伤亡人数："" + e.value[2] + "" 人<br />经济损失："" + fireloss[e.dataIndex] + "" 万元<br />受灾面积："" + firearea[e.dataIndex] + "" 公顷"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                           ");
            WriteLiteral(@"             'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                  ");
            WriteLiteral(@"      'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
");
            WriteLiteral(@"                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featu");
            WriteLiteral(@"reType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
    ");
            WriteLiteral(@"                                'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
   ");
            WriteLiteral(@"                                 'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },

                        series: [
                            {
                                name: '',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                //symbol: 'pin',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin',
                                symbol: 'diamond',
                                symbolSize: function (val) {
                                    return val[2] * 5;
                                },
                                label: {
                                    normal: {
                                        show: true,
                                        textS");
            WriteLiteral(@"tyle: {
                                            color: '#f0f',
                                            fontSize: 12,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        },
                                    },
                                    emphasis: {
                                        show: true,
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        //color: 'rgba(80,242,21)'
                                        color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                            ");
            WriteLiteral(@"                colorStops: [{
                                                offset: 0, color: '#FADBDB' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'rgba(255,0,0,1)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                    },
                                    emphasis: {
                                        color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                                            colorStops: [{
                                                offset: 0, color: '#FADBDB' // 0% 处的颜色
                                            }, {
                                  ");
            WriteLiteral(@"              offset: 1, color: 'rgba(255,0,0,1)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                    }
                                }
                            },
                            {
                                name: '',
                                type: 'effectScatter',
                                tooltip: { show: false },
                                coordinateSystem: 'bmap',
                                data: convertData(data.sort(function (a, b) {
                                    return b.value - a.value;
                                }).slice(0, 5)),
                                symbol: 'diamond',
                                symbolSize: function (val) {
                                    return val[2] * 3;
                                },
                                showEffectO");
            WriteLiteral(@"n: 'render',
                                rippleEffect: {
                                    brushType: 'stroke'
                                },
                                hoverAnimation: true,
                                label: {
                                    normal: {
                                        show: true,
                                        textStyle: {
                                            color: '#fff',
                                            fontSize: 9,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        color: 'rgba(165,234,67,0.88)',
                                       ");
            WriteLiteral(@" color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                                            colorStops: [{
                                                offset: 0, color: 'rgba(255,0,0,1)' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: '#FADBDB' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                        shadowBlur: 8,
                                        shadowColor: '#333'
                                    }
                                },
                                zlevel: 1
                            }
                        ]
                    };
               ");
            WriteLiteral(@"     myFireMap.setOption(option);

                    // 获取百度地图实例，使用百度地图自带的控件：热力图
                    //var bmap = myChart.getModel().getComponent('bmap').getBMap();
                    //bmap.addControl(new BMap.MapTypeControl());

                }
            })
        })
    }
</script>
");
            EndContext();
            BeginContext(68199, 12793, true);
            WriteLiteral(@"<script>
    function mapflood() {
        var myFloodMap = echarts.init(document.getElementById('floodmap'));
        myFloodMap.clear();//用于清除已存在的内容
        myFloodMap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetFloodMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var floodtime = [], flplaceloss = [], floodlevel = [], floodcasualty = [], floodstyle = [], floodarea = [], flplacejwdu = [];
                    for (var i = 0; i < response.flooddlist.length; i++) {
                        floodtime[i] = response.flooddlist[i].floodtime;
                        floodstyle[i] = response.flooddlist[i].floodstyle;
                        floodlevel[i] = response.flooddlist[i].floodlevel;
                        floodcasualty[i] = response.flooddli");
            WriteLiteral(@"st[i].floodcasualty;
                        floodarea[i] = response.flooddlist[i].floodarea;
                        flplacejwdu[i] = [response.flooddlist[i].floodlogitude, response.flooddlist[i].flooddimension];
                        flplaceloss[i + 1] = [response.flooddlist[i].floodplace, response.flooddlist[i].floodloss];
                    }
                    flplaceloss[0] = ['name', 'value'];
                    //console.log(placejwdu)
                    //数组-》json对象
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    var data = formatJson(flplaceloss);
                    var floodl");
            WriteLiteral(@"ongdimen = [];
                    for (var j = 0; j < flplacejwdu.length; j++) {
                        floodlongdimen[data[j].name] = flplacejwdu[j];
                    }
                    var geoCoordMap = floodlongdimen;
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myFloodM");
            WriteLiteral(@"ap.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
                            formatter: function (e) {
                                //console.log(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + floodtime[e.dataIndex].replace(""T"", "" "") + '<br />灾害级别：' + floodlevel[e.dataIndex] + '<br />灾害类型：' + floodstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + floodcasualty[e.dataIndex] + "" 人<br />受灾面积："" + floodarea[e.dataIndex] + "" 公顷"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                 ");
            WriteLiteral(@"           mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                             ");
            WriteLiteral(@"       }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    ");
            WriteLiteral(@"}
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                 ");
            WriteLiteral(@"   'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labe");
            WriteLiteral(@"ls',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
         ");
            WriteLiteral(@"                           'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },
                        series: [
                            {
                                name: '',
                                //type: 'effectScatter',
                                //type: 'heatmap',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
            ");
            WriteLiteral(@"                        //console.log(val)
                                    return val[2] / 25;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                                    brushType: 'stroke'
                                },
                                hoverAnimation: true,
                                symbol: 'circle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'

                                label: {
                                    normal: {
                                        show: true,
                                        textStyle: {
                                            color: '#fff',
                                            fontSize: 9,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
            ");
            WriteLiteral(@"                            }
                                    },
                                },
                                itemStyle: {
                                    normal: {
                                        color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                                            colorStops: [{
                                                offset: 0, color: '#FADBDB' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'rgba(242,178,10,1)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                        shadowBlur: 2,
                                  ");
            WriteLiteral(@"      shadowColor: '#333'
                                    }
                                },
                            }
                        ]
                    };
                    myFloodMap.setOption(option);

                    // 获取百度地图实例，使用百度地图自带的控件：热力图
                    //var bmap = myChart.getModel().getComponent('bmap').getBMap();
                    //bmap.addControl(new BMap.MapTypeControl());

                }
            })
        })
    }
</script>
");
            EndContext();
            BeginContext(81000, 12294, true);
            WriteLiteral(@"<script>
    function mapmeteorology() {
        var myQixiangMap = echarts.init(document.getElementById('meteorologymap'));
        myQixiangMap.clear();//用于清除已存在的内容
        myQixiangMap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetQixiangMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var qixiangtime = [], qiplaceloss = [], qixiangstyle = [], qixiangarea = [], qixiangcasualty = [], qiplacejwdu = [];
                    for (var i = 0; i < response.qidlist.length; i++) {
                        qixiangtime[i] = response.qidlist[i].qixiangtime;
                        qixiangstyle[i] = response.qidlist[i].qixiangstyle;
                        qixiangcasualty[i] = response.qidlist[i].qixiangcasualty;
                        qixiangarea[i] = re");
            WriteLiteral(@"sponse.qidlist[i].qixiangarea;
                        qiplacejwdu[i] = [response.qidlist[i].qixianglogitude, response.qidlist[i].qixiangdimension];
                        qiplaceloss[i + 1] = [response.qidlist[i].qixiangplace, response.qidlist[i].qixiangloss];
                    }
                    qiplaceloss[0] = ['name', 'value'];
                    //console.log(placejwdu)
                    //数组-》json对象
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    var data = formatJson(qiplaceloss);
                    var qilongdimen = [];
                    for (var j = 0; j < qiplacejwdu.len");
            WriteLiteral(@"gth; j++) {
                        qilongdimen[data[j].name] = qiplacejwdu[j];
                    }
                    var geoCoordMap = qilongdimen;
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myQixiangMap.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
    ");
            WriteLiteral(@"                        formatter: function (e) {
                                //console.log(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + qixiangtime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + qixiangstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + qixiangcasualty[e.dataIndex] + "" 人<br />受灾面积："" + qixiangarea[e.dataIndex] + "" 公顷"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType':");
            WriteLiteral(@" 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
         ");
            WriteLiteral(@"                               'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
             ");
            WriteLiteral(@"                           'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                 ");
            WriteLiteral(@"   }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'feat");
            WriteLiteral(@"ureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label',");
            WriteLiteral(@" //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },

                        series: [
                            {
                                name: '',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbol: 'path://M44,34.7H5.5l-0.1-0.5c-0.1-0.6-0.2-1.2-0.2-1.7c0-3.7,2.8-6.8,6.4-7.3     c1.1-5.9,6.2-10.3,12.3-10.3c4.9,0,9.3,2.8,11.3,7.2c0.3,0,0.5,0,0.7,0c4.9,0,8.9,4,8.9,8.9c0,1.2-0.2,2.3-0.7,3.3L44,34.7z      M6.5,33.5h36.7c0.3-0.8,0.4-1.7,0.4-2.5c0-4.2-3.5-7.7-7.7-7.7c-0.3,0-0.6,0-1,0.1l-0.5,0.1L34.2,23c-1.8-4.2-5.9-6.9-10.4-6.9     c-5.6,0-10.4,4.2-11.2,9.7l-0.1,0.5l-0.5,0c-3.2");
            WriteLiteral(@",0.2-5.7,2.9-5.7,6.2C6.4,32.9,6.4,33.2,6.5,33.5z',
                                symbolSize: function (val) {
                                    return val[2] / 20;
                                },
                                label: {
                                    normal: {
                                        show: true,
                                        position: ""insideBottom"",
                                        textStyle: {
                                            color: '#030F9D',
                                            fontSize: 10,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    },
                                },
                                itemStyle: {
                                    normal: {
                                        colo");
            WriteLiteral(@"r: ""#089DD6"",
                                    }
                                },
                                zlevel: 1
                            },
                            {
                                name: '',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    return val[2] / 12;
                                },

                                itemStyle: {
                                    normal: {
                                        color: ""#fff"",
                                    }
                                },
                                zlevel: 0
                            }
                        ]
                    };
                    myQixiangMap.setOption(option);
                }
            })
        })
    }
</scr");
            WriteLiteral("ipt>\r\n");
            EndContext();
            BeginContext(93302, 14511, true);
            WriteLiteral(@"<script>
    function mapmarine() {
        var myMarineMap = echarts.init(document.getElementById('marinemap'));
        myMarineMap.clear();//用于清除已存在的内容
        myMarineMap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetMarineMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var marinetime = [], marplaceloss = [], marinestyle = [], marinecasualty = [], marplacejwdu = [];
                    for (var i = 0; i < response.marinedlist.length; i++) {
                        marinetime[i] = response.marinedlist[i].marinetime;
                        marinestyle[i] = response.marinedlist[i].marinestyle;
                        marinecasualty[i] = response.marinedlist[i].marinecasualty;
                        marplaceloss[i + 1] = [response.marinedlis");
            WriteLiteral(@"t[i].marineplace, response.marinedlist[i].marineloss];
                        marplacejwdu[i] = [response.marinedlist[i].marinelogitude, response.marinedlist[i].marinedimension];
                    }
                    marplaceloss[0] = ['name', 'value'];
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    var data = formatJson(marplaceloss);
                    var marlongdimen = [];
                    for (var j = 0; j < marplacejwdu.length; j++) {
                        marlongdimen[data[j].name] = marplacejwdu[j];
                    }
                    var geoCoordMap = marlongdimen;
");
            WriteLiteral(@"                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myMarineMap.hideLoading();

                    option = {
                        tooltip: {
                            trigger: 'item',
                            formatter: function (e) {
                                //console.l");
            WriteLiteral(@"og(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + marinetime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + marinestyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + marinecasualty[e.dataIndex] + "" 人"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                    ");
            WriteLiteral(@"                    'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                },/* {
                                    'featureType': 'railway', //铁路
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off' //不显示
                                    }
                                },*/ {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                           ");
            WriteLiteral(@"             'weight': 0.1
                                    }
                                }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                ");
            WriteLiteral(@"    }
                                }, {
                                    'featureType': 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                   ");
            WriteLiteral(@" 'featureType': 'manmade', //人造
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all'");
            WriteLiteral(@",
                                    'stylers': {
                                        //'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill");
            WriteLiteral(@"',
                                    'stylers': {
                                        'color': '#999999'
                                    }
                                }]
                            }
                        },

                        series: [
                            {
                                name: '',
                                type: 'scatter',
                                symbolRotate: -180,
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    //console.log(Math.sqrt(val[2])/2)
                                    return Math.sqrt(val[2]) / 2;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                                    brushType: 'stroke'
                                },
         ");
            WriteLiteral(@"                       hoverAnimation: false,
                                symbol: 'triangle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                itemStyle: {
                                    normal: {
                                        color: '#1F67EA',
                                        color: {
                                            type: 'linear',
                                            x: 0,                 // 左上角x
                                            y: 0,                 // 左上角y
                                            x2: 0,                // 右下角x
                                            y2: 1,                // 右下角y
                                            colorStops: [{
                                                offset: 0, color: 'rgba(5,23,250,0)' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'rgba(5,23");
            WriteLiteral(@",250,0.88)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                        shadowBlur: 2,
                                        shadowColor: '#333'
                                    }
                                },
                            },
                            {
                                name: '',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    //console.log(Math.sqrt(val[2]) / 2)
                                    return Math.sqrt(val[2]) / 2;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                       ");
            WriteLiteral(@"             brushType: 'stroke'
                                },
                                hoverAnimation: false,
                                symbol: 'circle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                label: {
                                    normal: {
                                        show: true,
                                        position: 'inside',
                                        textStyle: {
                                            color: '#fff',
                                            fontSize: 10,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    },
                                },
                                itemStyle: {
                                    normal: {
     ");
            WriteLiteral(@"                                   color: 'rgba(5,23,250,1)',
                                        color: {
                                            type: 'radial',
                                            x: 0.5,
                                            y: 0.5,
                                            r: 0.5,
                                            colorStops: [{
                                                offset: 0, color: 'rgba(118,126,242,1)' // 0% 处的颜色
                                            }, {
                                                offset: 1, color: 'rgba(5,23,250,1)' // 100% 处的颜色
                                            }],
                                            global: false // 缺省为 false
                                        },
                                        shadowBlur: 2,
                                        shadowColor: '#333'
                                    }
                                },
                         ");
            WriteLiteral("   },\r\n                        ]\r\n                    };\r\n                    myMarineMap.setOption(option);\r\n                }\r\n            })\r\n        })\r\n    }\r\n</script>\r\n");
            EndContext();
            BeginContext(107821, 12320, true);
            WriteLiteral(@"<script>
    function mapquake() {
        var myQuakeMap = echarts.init(document.getElementById('quakemap'));
        myQuakeMap.clear();//用于清除已存在的内容
        myQuakeMap.showLoading();

        $(document).ready(function () {
            $.ajax({
                type: ""get"",
                url: ""/Home/GetQuakeMap"",
                dataType: 'json',
                data: {},
                cache: false,
                success: function (response) {
                    //console.log(response);
                    var quaketime = [], quakeloss = [], quakecasualty = [], qkplaceloss = [], quakedepth = [], quakearea = [], qkplacejwdu = [];
                    for (var i = 0; i < response.quakedlist.length; i++) {
                        quaketime[i] = response.quakedlist[i].quaketime;
                        quakedepth[i] = response.quakedlist[i].quakedepth;
                        quakecasualty[i] = response.quakedlist[i].quakecasualty;
                        quakeloss[i] = response.quakedl");
            WriteLiteral(@"ist[i].quakeloss;
                        quakearea[i] = response.quakedlist[i].quakearea;
                        qkplaceloss[i + 1] = [response.quakedlist[i].quakeplace, response.quakedlist[i].quakelevel];
                        qkplacejwdu[i] = [response.quakedlist[i].quakelongitude, response.quakedlist[i].quakedimension];
                    }
                    qkplaceloss[0] = ['name', 'value'];
                    function formatJson(source) {
                        var json = source.slice(1).map(vals => {
                            var obj = {};
                            vals.forEach((val, index) => {
                                obj[source[0][index]] = val
                            })
                            return obj;
                        });
                        return json
                    }
                    var data = formatJson(qkplaceloss);
                    var qklongdimen = [];
                    for (var j = 0; j < qkplacejwdu.length; j++) {
");
            WriteLiteral(@"                        qklongdimen[data[j].name] = qkplacejwdu[j];
                    }
                    var geoCoordMap = qklongdimen;
                    var convertData = function (data) {
                        var res = [];
                        for (var k = 0; k < data.length; k++) {
                            var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                            if (geoCoord) {
                                res.push({
                                    name: data[k].name,
                                    value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                    //成为了[name 经度 维度 value]的形式
                                });
                            }
                        }
                        //console.log(res)
                        return res;
                    };

                    myQuakeMap.hideLoading();

                    option = {
                        tooltip: {
 ");
            WriteLiteral(@"                           trigger: 'item',
                            formatter: function (e) {
                                //console.log(e)
                                return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + quaketime[e.dataIndex].replace(""T"", "" "") + '<br />经济损失：' + quakeloss[e.dataIndex] + "" 万元<br />地震级别："" + e.value[2] + "" 级<br />地震深度："" + quakedepth[e.dataIndex] + "" 千米<br />伤亡人数："" + quakecasualty[e.dataIndex] + "" 人<br />受灾面积："" + quakearea[e.dataIndex] + "" 公顷"";
                            }
                        },

                        bmap: { //加载bmap组件：百度地图api的设置
                            //center: [104.114129, 37.550339],
                            center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                            zoom: 8, //地图缩放大小：越大越细致
                            roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                            mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
            ");
            WriteLiteral(@"                    styleJson: [{
                                    'featureType': 'water', //水域
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#BDE3FD' //颜色
                                    }
                                }, {
                                    'featureType': 'land', //陆地
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#f3f3f3'
                                    }
                                }, {
                                    'featureType': 'highway', //高速路
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#FDDC84',
                                        'weight': 0.1
                                    }
                            ");
            WriteLiteral(@"    }, {
                                    'featureType': 'highway', //高速路标签
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'arterial', //道路 干线
                                    'elementType': 'geometry',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType': 'arterial',
                                    'elementType': 'geometry.fill',
                                    'stylers': {
                                        'color': '#fefefe'
                                    }
                                }, {
                                    'featureType':");
            WriteLiteral(@" 'poi', //感兴趣点
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },/* {
                                    'featureType': 'green', //绿地
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, */{
                                    'featureType': 'subway', //地铁
                                    'elementType': 'all',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                }, {
                                    'featureType': 'manmade', //人造
                                    'elementType': 'all',
   ");
            WriteLiteral(@"                                 'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'local',
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                },/* {
                                    'featureType': 'arterial',
                                    'elementType': 'labels',
                                    'stylers': {
                                        'visibility': 'off'
                                    }
                                },*/ {
                                    'featureType': 'boundary',
                                    'elementType': 'all',
                                    'stylers': {
                                        //");
            WriteLiteral(@"'color': '#989898'
                                        'color': '#490202'
                                    }
                                }, {
                                    'featureType': 'district',  //行政区标签
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#eeeeee'
                                    }
                                }, {
                                    'featureType': 'building', //建筑
                                    'elementType': 'all',
                                    'stylers': {
                                        'color': '#d1d1d1'
                                    }
                                }, {
                                    'featureType': 'label', //标签字体填充
                                    'elementType': 'labels.text.fill',
                                    'stylers': {
                                        '");
            WriteLiteral(@"color': '#999999'
                                    }
                                }]
                            }
                        },

                        series: [
                            {
                                name: '',
                                //type: 'effectScatter',
                                //type: 'heatmap',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                symbolSize: function (val) {
                                    return val[2] * 5;
                                },
                                showEffectOn: 'render',
                                rippleEffect: {
                                    brushType: 'stroke'
                                },
                                hoverAnimation: false,
                                symbol: 'arrow',
                        ");
            WriteLiteral(@"        itemStyle: {
                                    normal: {
                                        color: 'rgba(240,8,52,0.88)',
                                        shadowBlur: 2,
                                        shadowColor: '#333'
                                    }
                                },
                            },
                            {
                                name: '',
                                type: 'scatter',
                                coordinateSystem: 'bmap',
                                data: convertData(data),
                                hoverAnimation: false,
                                symbolSize: function (val) {
                                    return val[2] * 5;
                                },
                                symbolOffset: [0, '25%'],
                                label: {
                                    normal: {
                                        show: true,
        ");
            WriteLiteral(@"                                textStyle: {
                                            color: '#fff',
                                            fontSize: 9,
                                        },
                                        formatter(value) {
                                            return value.data.value[2]
                                        }
                                    }
                                },
                                itemStyle: {
                                    normal: {
                                        color: 'rgba(255,0,0,1)',
                                        //shadowBlur: 10,
                                        //shadowColor: '#333'
                                    }
                                },
                                zlevel: 1
                            }
                        ]
                    };
                    myQuakeMap.setOption(option);
                }
            })");
            WriteLiteral("\r\n        })\r\n    }\r\n</script>\r\n");
            EndContext();
            BeginContext(120152, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(120165, 28285, true);
            WriteLiteral(@"<script>
    function queryData() {
        let eightselect = $(""#eightselect option:selected"").val();
        let startDate = $(""#startDate"").val();
        let endDate = $(""#endDate"").val();
        //console.log(eightselect,startDate, endDate)
        if (eightselect == '') {
            alert(""请选择要查询数据的灾害类别"");
            $(""#eightselect"").focus();
        } else {
            $(document).ready(function () {
                $.ajax({
                    type: ""post"",
                    url: ""/Home/queryDataMap"",
                    dataType: 'json',
                    data: {
                        ""eightselect"": eightselect,
                        ""startDate"": startDate,
                        ""endDate"": endDate
                    },
                    cache: false,
                    success: function (response) {
                        //console.log(response);
                        //查询所有数据
                        let oDate1 = new Date(startDate);
                    ");
            WriteLiteral(@"    let oDate2 = new Date(endDate);

                        function cropexcel() {
                            //console.log(response.cropdlist.length)
                            if (response.cropdlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>灾害类型</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.cropdlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' c");
            WriteLiteral(@"lass='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.cropdlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].croptime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].croplongitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].cropdimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].cropstyle + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].croploss + ""</td>"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].croparea + ""</td");
            WriteLiteral(@">"";
                                    tdBodys += ""<td>"" + response.cropdlist[i].cropplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.cropdlist[i].cropdetails + ""</div><span id='spandetails'>"" + response.cropdlist[i].cropdetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                      ");
            WriteLiteral(@"      }
                        }
                        function forestexcel() {
                            if (response.forestdlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>灾害类型</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.forestdlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; bord");
            WriteLiteral(@"er-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.forestdlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].foresttime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].forestlogitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].forestdimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].foreststyle + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].forestloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.forestdlist[i].forestarea + ""</td>"";
                                    t");
            WriteLiteral(@"dBodys += ""<td>"" + response.forestdlist[i].forestplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.forestdlist[i].forestdetails + ""</div><span id='spandetails'>"" + response.forestdlist[i].forestdetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                     ");
            WriteLiteral(@"   }
                        function geologyexcel() {
                            if (response.geologydlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>伤亡人数(人)</td><td>灾害级别</td><td>灾害类型</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.geologydlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; bo");
            WriteLiteral(@"rder-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.geologydlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologytime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologylogitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologydimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologycasualty + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologylevel + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologystyle + ""</td>"";
                 ");
            WriteLiteral(@"                   tdBodys += ""<td>"" + response.geologydlist[i].geologyloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologyarea + ""</td>"";
                                    tdBodys += ""<td>"" + response.geologydlist[i].geologyplace + ""</td>"";
                                    tdBodys += ""<td style='width:20%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.geologydlist[i].geologydetails + ""</div><span id='spandetails'>"" + response.geologydlist[i].geologydetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.leng");
            WriteLiteral(@"th > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function fireexcel() {
                            if (response.firedlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>伤亡人数(人)</td><td>灾害级别</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.firedlist.length + "" </stro");
            WriteLiteral(@"ng>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.firedlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].firetime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].firelogitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].firedimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].firecasualty + ""</td>"";
                                    tdBody");
            WriteLiteral(@"s += ""<td>"" + response.firedlist[i].fireslevel + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].fireloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].firearea + ""</td>"";
                                    tdBodys += ""<td>"" + response.firedlist[i].fireplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.firedlist[i].firedetails + ""</div><span id='spandetails'>"" + response.firedlist[i].firedetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
  ");
            WriteLiteral(@"                              if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function floodexcel() {
                            if (response.flooddlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>灾害级别</td><td>伤亡人数(人)</td><td>灾害类型</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong styl");
            WriteLiteral(@"e='font-size:16px;'> "" + response.flooddlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.flooddlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodtime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodlogitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].flooddimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[");
            WriteLiteral(@"i].floodlevel + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodcasualty + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodstyle + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodarea + ""</td>"";
                                    tdBodys += ""<td>"" + response.flooddlist[i].floodplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.flooddlist[i].flooddetails + ""</div><span id='spandetails'>"" + response.flooddlist[i].flooddetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                            ");
            WriteLiteral(@"    $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function meteorologyexcel() {
                            if (response.qidlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>伤亡人数(人)</td><td>灾害类型</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                                var tdBodys = """"; //表数据
            ");
            WriteLiteral(@"                    tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.qidlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.qidlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangtime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixianglogitude + ""</td>"";
                ");
            WriteLiteral(@"                    tdBodys += ""<td>"" + response.qidlist[i].qixiangdimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangcasualty + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangstyle + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangarea + ""</td>"";
                                    tdBodys += ""<td>"" + response.qidlist[i].qixiangplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.qidlist[i].qixiangdetails + ""</div><span id='spandetails'>"" + response.qidlist[i].qixiangdetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBo");
            WriteLiteral(@"dys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function merineexcel() {
                            if (response.marinedlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>伤亡人数(人)</td><td>灾害类型</td><td>经济损失(万元)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                               ");
            WriteLiteral(@" var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.marinedlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.marinedlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marinetime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.marine");
            WriteLiteral(@"dlist[i].marinelogitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marinedimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marinecasualty + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marinestyle + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marineloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.marinedlist[i].marineplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.marinedlist[i].marinedetails + ""</div><span id='spandetails'>"" + response.marinedlist[i].marinedetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";");
            WriteLiteral(@"
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function quakeexcel() {
                            if (response.quakedlist.length == 0) {
                                $(""#displaydata"").html(""暂无数据"");
                            } else {
                                $(""#displaydata"").html("""");
                                var tdHeaders = '<td>序号</td><td>时间</td><td>经度(°)</td><td>纬度(°)</td><td>震级</td><td>深度(km)</td><td>伤亡人数(人)</td><td>经济损失(万元)</td><td>灾害范围(公顷)</td><td>参考位置</td><td>详情</td>'; // 表头第一列
                              ");
            WriteLiteral(@"  var tdBodys = """"; //表数据
                                tdBodys += ""<hr style='margin-top:0px;margin-bottom:5px; border-top:1px solid #fd0;' /><div style='display:inline-block; margin-top:6px;'>共查找到<strong style='font-size:16px;'> "" + response.quakedlist.length + "" </strong>条记录 </div><button onclick='downloadexcel();' class='btn btn-success' style='float:right; margin-bottom:5px;'>导出EXCEL</button><table id='mapdata' class='table-bordered table-striped' style='text-align: center; border-collapse: collapse; margin: 0 auto; text-align: center; width:100%;' border='1'><tbody><tr>"" + tdHeaders + ""</tr>"";
                                for (let i = 0; i < response.quakedlist.length; i++) {
                                    tdBodys += ""<tr>"";
                                    tdBodys += ""<td>"" + (i + 1) + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quaketime.replace(""T"", "" "") + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlis");
            WriteLiteral(@"t[i].quakelongitude + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakedimension + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakelevel + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakedepth + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakecasualty + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakeloss + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakearea + ""</td>"";
                                    tdBodys += ""<td>"" + response.quakedlist[i].quakeplace + ""</td>"";
                                    tdBodys += ""<td style='width:25%; text-align:justify; text-align-last:left;' class='newsInfo'><div class='newInfoTruncation' id='boxId'>"" + response.quakedlist[i].quakedetails + ""</div><span id='spandetails'>"" + response.quakedlist[i].qu");
            WriteLiteral(@"akedetails + ""</span></td>"";
                                    tdBodys += ""</tr>"";
                                }
                                tdBodys += ""</tbody></table>"";
                                $(""#displaydata"").append(tdBodys);
                                location.href = ""#maodian"";

                                var txtData = $("".newInfoTruncation"").text();
                                if (txtData.length > 20) {
                                    txtData = txtData.slice(0, 20) + ""..."";
                                }
                                $(""#boxId"").text(txtData);
                            }
                        }
                        function switchexcel() {
                            switch (eightselect) {
                                case ""农作物生物灾害"":
                                    cropexcel();
                                    break;
                                case ""森林生物灾害"":
                                    forestexc");
            WriteLiteral(@"el();
                                    break;
                                case ""地质灾害"":
                                    geologyexcel();
                                    break;
                                case ""森林火灾"":
                                    fireexcel()
                                    break;
                                case ""洪水灾害"":
                                    floodexcel();
                                    break;
                                case ""气象灾害"":
                                    meteorologyexcel();
                                    break;
                                case ""海洋灾害"":
                                    merineexcel();
                                    break;
                                case ""地震灾害"":
                                    quakeexcel();
                                    break;
                                default:
                                    $(""#displaydata"").html('暂无数据');
         ");
            WriteLiteral(@"                           break;
                            }
                        }
                        if (startDate == '') {
                            switchexcel();
                        } else {
                            if (oDate1.getTime() > oDate2.getTime()) {
                                alert(""开始日期不能大于结束日期"");
                                $(""#startDate"").focus();
                            } else {
                                switchexcel();
                            }
                        }
                    }
                })
            })
        }
    }
</script>
");
            EndContext();
            BeginContext(148461, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(148476, 904, true);
            WriteLiteral(@"<script>
    function downloadexcel() {
        //console.log(1);
        $(""#spandetails"").html("""");
        $.noConflict(); //请务必加上这一句，否则无法下载excel，因为$符号与其他jq版本冲突了
        $(""#mapdata"").table2excel({
            exclude: "".noExl"",
            name: new Date().getTime(),
            filename: new Date().getTime(),
            exclude_img: true,
            exclude_links: true,
            exclude_inputs: true
        });
        window.location.reload();
    }

    //$.noConflict(); //请务必加上这一句，否则无法下载excel
    //$(""#tableExcel_Crop"").table2excel({ //通过id即tableExcel_Day
    //    exclude: "".noExl"", //过滤位置的 css 类名：有class=""noExl""的行不被导出
    //    name: ""表格-"" + new Date().getTime(),
    //    filename: ""广西农作物生物灾害发生面积和防治面积"" + new Date().getTime() + "".xls"", //文件名称
    //    exclude_img: true,
    //    exclude_links: true,
    //    exclude_inputs: true
    //});
</script>
");
            EndContext();
            BeginContext(149391, 130982, true);
            WriteLiteral(@"<script>
    function displaytomap() {
        let eightselect = $(""#eightselect option:selected"").val();
        let startDate = $(""#startDate"").val();
        let endDate = $(""#endDate"").val();
        //console.log(eightselect, startDate, endDate)
        if (eightselect == '') {
            alert(""请选择要查询数据的灾害类别"");
            $(""#eightselect"").focus();
        } else {
            if (startDate == '') {
                alert(""开始日期不能为空"");
                $(""#startDate"").focus();
            } else {
                if (endDate == '') {
                    alert(""结束日期不能为空"");
                    $(""#endDate"").focus();
                } else {
                    let oDate1 = new Date(startDate);
                    let oDate2 = new Date(endDate);
                    if (oDate1.getTime() > oDate2.getTime()) {
                        alert(""开始日期不能大于结束日期"");
                        $(""#startDate"").focus();
                    } else {
                        $(document).ready(function () ");
            WriteLiteral(@"{
                            $.ajax({
                                type: ""post"",
                                url: ""/Home/DisplayToMap"",
                                dataType: 'json',
                                data: {
                                    ""eightselect"": eightselect,
                                    ""startDate"": startDate,
                                    ""endDate"": endDate
                                },
                                cache: false,
                                success: function (response) {
                                    //console.log(response);
                                    function selectCropMap() {
                                        var mychinaCharts = echarts.init(document.getElementById('cropmap'));
                                        mychinaCharts.clear();//用于清除已存在的内容
                                        mychinaCharts.showLoading();
                                        var croptime = [], placeloss = [");
            WriteLiteral(@"], longitude = [], dimension = [], cropstyle = [], croparea = [], placejwdu = [];
                                        for (var i = 0; i < response.cropdlist.length; i++) {
                                            croptime[i] = response.cropdlist[i].croptime;
                                            cropstyle[i] = response.cropdlist[i].cropstyle;
                                            croparea[i] = response.cropdlist[i].croparea;
                                            placeloss[i + 1] = [response.cropdlist[i].cropplace, response.cropdlist[i].croploss];
                                            placejwdu[i] = [response.cropdlist[i].croplongitude, response.cropdlist[i].cropdimension];
                                        }
                                        placeloss[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                             ");
            WriteLiteral(@"                   var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        //定义每个位置需要显示的量的值
                                        var data = formatJson(placeloss);
                                        //console.log(data);
                                        var objlongdimen = [];
                                        for (var j = 0; j < placejwdu.length; j++) {
                                            objlongdimen[data[j].name] = placejwdu[j];
                                        }

                                        var geoCoordMap = objlongdimen;
                ");
            WriteLiteral(@"                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                        //成为了[name 经度 维度 value]的形式
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        my");
            WriteLiteral(@"chinaCharts.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    console.log(e)
                                                    return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + croptime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + cropstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />受灾面积："" + croparea[e.dataIndex] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                //center: [104.114129, 37.550339],
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
             ");
            WriteLiteral(@"                                   zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                 ");
            WriteLiteral(@"                                           'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
         ");
            WriteLiteral(@"                                               }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                 ");
            WriteLiteral(@"                       'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                       ");
            WriteLiteral(@"                                 'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                      ");
            WriteLiteral(@"                      'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                 ");
            WriteLiteral(@"   }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                                    }]
                                                }
                                            },
                                            series: [
                                                {
                                                    name: 'test',
                                                    type: 'effectScatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize:");
            WriteLiteral(@" function (val) {
                                                        return val[2] / 15;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: true,
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
                                                                fontSize: 9,
                                                            },
                    ");
            WriteLiteral(@"                                        formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        }
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: 'rgba(3,247,134,1)',
                                                            shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                                {
                                                    name: 'Top 5',
                             ");
            WriteLiteral(@"                       type: 'scatter',
                                                    tooltip: { show: false },
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data.sort(function (a, b) {
                                                        return b.value - a.value;
                                                    }).slice(0, 5)),
                                                    symbolSize: function (val) {
                                                        return val[2] / 20;
                                                    },
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
  ");
            WriteLiteral(@"                                                              fontSize: 9,
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        }
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: {
                                                                type: 'linear',
                                                                x: 0,                 // 左上角x
                                                                y: 0,                 // 左上角y
                                                            ");
            WriteLiteral(@"    x2: 0,                // 右下角x
                                                                y2: 1,                // 右下角y
                                                                colorStops: [{
                                                                    offset: 0, color: 'rgba(93,214,245,0.76)' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(90,214,245,0.88)' // 100% 处的颜色
                                                                }],
                                                                global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 10,
                                                            shadowColor: '#333'
                                                        }
                                                    },
");
            WriteLiteral(@"                                                    zlevel: 1
                                                }
                                            ]
                                        };
                                        mychinaCharts.setOption(option);
                                    }
                                    function selectForestMap() {
                                        var myMapCharts = echarts.init(document.getElementById('forestmap'));
                                        myMapCharts.clear();
                                        myMapCharts.showLoading();
                                        var foresttime = [], forestplacearea = [], forestplacejwdu = [], forestloss = [], foreststyle = [], forestarea = [];
                                        for (var i = 0; i < response.forestdlist.length; i++) {
                                            foresttime[i] = response.forestdlist[i].foresttime;
                                            for");
            WriteLiteral(@"estplacearea[i + 1] = [response.forestdlist[i].forestplace, response.forestdlist[i].forestarea];
                                            forestplacejwdu[i] = [response.forestdlist[i].forestlogitude, response.forestdlist[i].forestdimension];
                                            forestloss[i] = response.forestdlist[i].forestloss;
                                            foreststyle[i] = response.forestdlist[i].foreststyle;
                                            forestarea[i] = response.forestdlist[i].forestarea;
                                        }
                                        forestplacearea[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[sour");
            WriteLiteral(@"ce[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(forestplacearea);
                                        var forestlongdimen = [];
                                        for (var j = 0; j < forestplacejwdu.length; j++) {
                                            forestlongdimen[data[j].name] = forestplacejwdu[j];
                                        }
                                        var geoCoordMap = forestlongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = g");
            WriteLiteral(@"eoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myMapCharts.hideLoading();
                                        option = {
                                            tooltip: {
                                                show: true,
                                                trigger: 'item',
                                                formatter: function (params) {
            ");
            WriteLiteral(@"                                        return '<p style=""text-align:center;margin-bottom:0;"">' + params.name + '</p>发生时刻：' + foresttime[params.dataIndex].replace(""T"", "" "") + ""<br />灾害类型："" + foreststyle[params.dataIndex] + ""<br />经济损失："" + forestloss[params.dataIndex] + "" 万元<br />受灾面积："" + params.value[2] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'wate");
            WriteLiteral(@"r', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers");
            WriteLiteral(@"': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                          ");
            WriteLiteral(@"  'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
            ");
            WriteLiteral(@"                                            'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
        ");
            WriteLiteral(@"                                                'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
           ");
            WriteLiteral(@"                                                 'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
            ");
            WriteLiteral(@"                                        }]
                                                }
                                            },
                                            //热力图
                                            visualMap: {
                                                min: 0,
                                                max: 90000,
                                                splitNumber: 5,
                                                seriesIndex: 0,
                                                calculable: true,
                                                inRange: {
                                                    color: ['orange', '#86031A', 'blue', '#d94e5d', 'green', '#eac736', 'red', '#50a3ba', 'yellow'].reverse()
                                                },
                                                textStyle: {
                                                    color: '#333'
                                                }
      ");
            WriteLiteral(@"                                      },
                                            series: [
                                                {
                                                    name: 'test',
                                                    type: 'heatmap',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                },
                                                {
                                                    name: '散点',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return (Math.log2(val[2] / 1000));
             ");
            WriteLiteral(@"                                       },
                                                    itemStyle: {
                                                        normal: {
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                                                                r: 0.5,
                                                                colorStops: [{
                                                                    offset: 0, color: '#FADBDB' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'blue' // 100% 处的颜色
                                                                }],
                                            ");
            WriteLiteral(@"                    global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 5,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                            ]
                                        };
                                        myMapCharts.setOption(option);
                                    }
                                    function selectGeologyMap() {
                                        var myGeologymap = echarts.init(document.getElementById('geologymap'));
                                        myGeologymap.clear();//用于清除已存在的内容
                                        myGeologymap.showLoading();
                                        var geologytime = [], ");
            WriteLiteral(@"geologyloss = [], geologycasualty = [], geologystyle = [], geologyarea = [], gplacejwdu = [], geologylevel = [];
                                        for (var i = 0; i < response.geologydlist.length; i++) {
                                            geologytime[i] = response.geologydlist[i].geologytime;
                                            geologyloss[i] = response.geologydlist[i].geologyloss;
                                            geologystyle[i] = response.geologydlist[i].geologystyle;
                                            geologyarea[i] = response.geologydlist[i].geologyarea;
                                            geologylevel[i] = response.geologydlist[i].geologylevel;

                                            geologycasualty[i + 1] = [response.geologydlist[i].geologyplace, response.geologydlist[i].geologycasualty];
                                            gplacejwdu[i] = [response.geologydlist[i].geologylogitude, response.geologydlist[i].geologydimension];
     ");
            WriteLiteral(@"                                   }
                                        geologycasualty[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(geologycasualty);
                                        var glongdimen = [];
                                        for (var j = 0; j < gplacejwdu.length; j++) {
                                ");
            WriteLiteral(@"            glongdimen[data[j].name] = gplacejwdu[j];
                                        }

                                        var geoCoordMap = glongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                        //成为了[name 经度 维度 value]的形式
                                                    });
                                                }
     ");
            WriteLiteral(@"                                       }
                                            return res;
                                        };

                                        myGeologymap.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    //console.log(e)
                                                    return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + geologytime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + geologystyle[e.dataIndex] + ""<br />伤亡人数："" + e.value[2] + "" 人<br />灾害级别："" + geologylevel[e.dataIndex] + ""<br />经济损失："" + geologyloss[e.dataIndex] + "" 万元<br />受灾面积："" + geologyarea[e.dataIndex] + "" 公顷"";
                                                }
                                            ");
            WriteLiteral(@"},
                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                   ");
            WriteLiteral(@"     'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                          ");
            WriteLiteral(@"              'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                              ");
            WriteLiteral(@"                              'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                ");
            WriteLiteral(@"    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType'");
            WriteLiteral(@": 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        's");
            WriteLiteral(@"tylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                                    }]
                                                }
                                            },

                                            series: [
                                                {
                                                    name: 'test',
                                                    type: 'effectScatter',
                  ");
            WriteLiteral(@"                                  coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return val[2] / 100;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: true,
                                                    symbol: 'pin',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                                    symbolSize: [50, 50],
                                                    label: {
                                ");
            WriteLiteral(@"                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
                                                                fontSize: 9,
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        }
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: '#F28903',
                                                          ");
            WriteLiteral(@"  shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                            ]
                                        };
                                        myGeologymap.setOption(option);
                                    }
                                    function selectFireMap() {
                                        var myFireMap = echarts.init(document.getElementById('firemap'));
                                        myFireMap.clear();//用于清除已存在的内容
                                        myFireMap.showLoading();
                                        var firetime = [], fplaceloss = [], fireloss = [], fireslevel = [], firearea = [], fplacejwdu = [];
                                        for (var i = 0; i < response.firedlist.length; i++) {
          ");
            WriteLiteral(@"                                  firetime[i] = response.firedlist[i].firetime;
                                            fireloss[i] = response.firedlist[i].fireloss;
                                            fireslevel[i] = response.firedlist[i].fireslevel;
                                            firearea[i] = response.firedlist[i].firearea;
                                            fplaceloss[i + 1] = [response.firedlist[i].fireplace, response.firedlist[i].firecasualty];
                                            fplacejwdu[i] = [response.firedlist[i].firelogitude, response.firedlist[i].firedimension];
                                        }
                                        fplaceloss[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.fo");
            WriteLiteral(@"rEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(fplaceloss);
                                        var flongdimen = [];
                                        for (var j = 0; j < fplacejwdu.length; j++) {
                                            flongdimen[data[j].name] = fplacejwdu[j];
                                        }

                                        var geoCoordMap = flongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
       ");
            WriteLiteral(@"                                         var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myFireMap.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                     ");
            WriteLiteral(@"                               return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + firetime[e.dataIndex].replace(""T"", "" "") + '<br />灾害级别：' + fireslevel[e.dataIndex] + ""<br />伤亡人数："" + e.value[2] + "" 人<br />经济损失："" + fireloss[e.dataIndex] + "" 万元<br />受灾面积："" + firearea[e.dataIndex] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'w");
            WriteLiteral(@"ater', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'styl");
            WriteLiteral(@"ers': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                       ");
            WriteLiteral(@"     'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
         ");
            WriteLiteral(@"                                               'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
     ");
            WriteLiteral(@"                                                   'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
        ");
            WriteLiteral(@"                                                    'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
         ");
            WriteLiteral(@"                                           }]
                                                }
                                            },

                                            series: [
                                                {
                                                    name: '',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    //symbol: 'pin',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin',
                                                    symbol: 'diamond',
                                                    symbolSize: function (val) {
                                                        return val[2] * 5;
                                                    },
                                                    label: {
");
            WriteLiteral(@"                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#f0f',
                                                                fontSize: 12,
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            },
                                                        },
                                                        emphasis: {
                                                            show: true,
                                                        }
                                                    },
                                  ");
            WriteLiteral(@"                  itemStyle: {
                                                        normal: {
                                                            //color: 'rgba(80,242,21)'
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                                                                r: 0.5,
                                                                colorStops: [{
                                                                    offset: 0, color: '#FADBDB' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(255,0,0,1)' // 100% 处的颜色
                                                                }],
                      ");
            WriteLiteral(@"                                          global: false // 缺省为 false
                                                            },
                                                        },
                                                        emphasis: {
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                                                                r: 0.5,
                                                                colorStops: [{
                                                                    offset: 0, color: '#FADBDB' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(255,0,0,1)' // 100% 处的颜色
               ");
            WriteLiteral(@"                                                 }],
                                                                global: false // 缺省为 false
                                                            },
                                                        }
                                                    }
                                                },
                                                {
                                                    name: '',
                                                    type: 'effectScatter',
                                                    tooltip: { show: false },
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data.sort(function (a, b) {
                                                        return b.value - a.value;
                                                    }).slice(0, 5)),
                                                ");
            WriteLiteral(@"    symbol: 'diamond',
                                                    symbolSize: function (val) {
                                                        return val[2] * 3;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: true,
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
                                                                fontSize: 9,");
            WriteLiteral(@"
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        }
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: 'rgba(165,234,67,0.88)',
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                                                                r: 0.5,
            ");
            WriteLiteral(@"                                                    colorStops: [{
                                                                    offset: 0, color: 'rgba(255,0,0,1)' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: '#FADBDB' // 100% 处的颜色
                                                                }],
                                                                global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 8,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                    zlevel: 1
                                                }
                                            ]
  ");
            WriteLiteral(@"                                      };
                                        myFireMap.setOption(option);
                                    }
                                    function selectFloodMap() {
                                        var myFloodMap = echarts.init(document.getElementById('floodmap'));
                                        myFloodMap.clear();//用于清除已存在的内容
                                        myFloodMap.showLoading();
                                        var floodtime = [], flplaceloss = [], floodlevel = [], floodcasualty = [], floodstyle = [], floodarea = [], flplacejwdu = [];
                                        for (var i = 0; i < response.flooddlist.length; i++) {
                                            floodtime[i] = response.flooddlist[i].floodtime;
                                            floodstyle[i] = response.flooddlist[i].floodstyle;
                                            floodlevel[i] = response.flooddlist[i].floodlevel;
          ");
            WriteLiteral(@"                                  floodcasualty[i] = response.flooddlist[i].floodcasualty;
                                            floodarea[i] = response.flooddlist[i].floodarea;
                                            flplacejwdu[i] = [response.flooddlist[i].floodlogitude, response.flooddlist[i].flooddimension];
                                            flplaceloss[i + 1] = [response.flooddlist[i].floodplace, response.flooddlist[i].floodloss];
                                        }
                                        flplaceloss[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
       ");
            WriteLiteral(@"                                         return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(flplaceloss);
                                        var floodlongdimen = [];
                                        for (var j = 0; j < flplacejwdu.length; j++) {
                                            floodlongdimen[data[j].name] = flplacejwdu[j];
                                        }
                                        var geoCoordMap = floodlongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                           ");
            WriteLiteral(@"     if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myFloodMap.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + floodtime[e.dataIndex].replace(""T"", "" """);
            WriteLiteral(@") + '<br />灾害级别：' + floodlevel[e.dataIndex] + '<br />灾害类型：' + floodstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + floodcasualty[e.dataIndex] + "" 人<br />受灾面积："" + floodarea[e.dataIndex] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
                                                        'elementType': 'all',
          ");
            WriteLiteral(@"                                              'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#FDDC84',
            ");
            WriteLiteral(@"                                                'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                  ");
            WriteLiteral(@"                                  }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'subway', //地铁
                        ");
            WriteLiteral(@"                                'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                                        'stylers': {
                                     ");
            WriteLiteral(@"                       'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#eeeeee'
                              ");
            WriteLiteral(@"                          }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                                    }]
                                                }
    ");
            WriteLiteral(@"                                        },
                                            series: [
                                                {
                                                    name: '',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        //console.log(val)
                                                        return val[2] / 25;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
              ");
            WriteLiteral(@"                                      hoverAnimation: true,
                                                    symbol: 'circle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
                                                                fontSize: 9,
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        },
                     ");
            WriteLiteral(@"                               },
                                                    itemStyle: {
                                                        normal: {
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                                                                r: 0.5,
                                                                colorStops: [{
                                                                    offset: 0, color: '#FADBDB' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(242,178,10,1)' // 100% 处的颜色
                                                                }],
                                      ");
            WriteLiteral(@"                          global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                }
                                            ]
                                        };
                                        myFloodMap.setOption(option);
                                    }
                                    function selectMeteorologyMap() {
                                        var myQixiangMap = echarts.init(document.getElementById('meteorologymap'));
                                        myQixiangMap.clear();//用于清除已存在的内容
                                        myQixiangMap.showLoading();
                                        var qixian");
            WriteLiteral(@"gtime = [], qiplaceloss = [], qixiangstyle = [], qixiangarea = [], qixiangcasualty = [], qiplacejwdu = [];
                                        for (var i = 0; i < response.qidlist.length; i++) {
                                            qixiangtime[i] = response.qidlist[i].qixiangtime;
                                            qixiangstyle[i] = response.qidlist[i].qixiangstyle;
                                            qixiangcasualty[i] = response.qidlist[i].qixiangcasualty;
                                            qixiangarea[i] = response.qidlist[i].qixiangarea;
                                            qiplacejwdu[i] = [response.qidlist[i].qixianglogitude, response.qidlist[i].qixiangdimension];
                                            qiplaceloss[i + 1] = [response.qidlist[i].qixiangplace, response.qidlist[i].qixiangloss];
                                        }
                                        qiplaceloss[0] = ['name', 'value'];
                                       ");
            WriteLiteral(@" function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(qiplaceloss);
                                        var qilongdimen = [];
                                        for (var j = 0; j < qiplacejwdu.length; j++) {
                                            qilongdimen[data[j].name] = qiplacejwdu[j];
                                        }
                                        var geoCoordMap = qi");
            WriteLiteral(@"longdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myQixiangMap.hideLoading();

                           ");
            WriteLiteral(@"             option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + qixiangtime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + qixiangstyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + qixiangcasualty[e.dataIndex] + "" 人<br />受灾面积："" + qixiangarea[e.dataIndex] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 '");
            WriteLiteral(@"move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                             ");
            WriteLiteral(@"                       }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                           ");
            WriteLiteral(@"             'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                   ");
            WriteLiteral(@"                                     'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                        ");
            WriteLiteral(@"                                }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                  ");
            WriteLiteral(@"  }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                    ");
            WriteLiteral(@"    'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                                    }]
                                                }
                                            },

                                            series: [
                                                {
                                                    name: '',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbol: 'path://M44,34.7H5.5l-0.1-0.5c-0.1-0.6-0.2-1.2-0.2-1.7c0-3.7,2.8-6.8,6.4-7.3     c1.1-5.9,6.2-10.3,12.3-10.3c4.9,0,9.3,2.8,11.3,7.2c0.3,0,0.5,0,0.7,0c4.9,0,8.9,4,");
            WriteLiteral(@"8.9,8.9c0,1.2-0.2,2.3-0.7,3.3L44,34.7z      M6.5,33.5h36.7c0.3-0.8,0.4-1.7,0.4-2.5c0-4.2-3.5-7.7-7.7-7.7c-0.3,0-0.6,0-1,0.1l-0.5,0.1L34.2,23c-1.8-4.2-5.9-6.9-10.4-6.9     c-5.6,0-10.4,4.2-11.2,9.7l-0.1,0.5l-0.5,0c-3.2,0.2-5.7,2.9-5.7,6.2C6.4,32.9,6.4,33.2,6.5,33.5z',
                                                    symbolSize: function (val) {
                                                        return val[2] / 20;
                                                    },
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            position: ""insideBottom"",
                                                            textStyle: {
                                                                color: '#030F9D',
                                                                fontSize: 10,
               ");
            WriteLiteral(@"                                             },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        },
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: ""#089DD6"",
                                                        }
                                                    },
                                                    zlevel: 1
                                                },
                                                {
                                                    name: '',
                                                    type: 'scatter',");
            WriteLiteral(@"
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return val[2] / 12;
                                                    },

                                                    itemStyle: {
                                                        normal: {
                                                            color: ""#fff"",
                                                        }
                                                    },
                                                    zlevel: 0
                                                }
                                            ]
                                        };
                                        myQixiangMap.setOption(option);
                                    }
       ");
            WriteLiteral(@"                             function selectMarineMap() {
                                        var myMarineMap = echarts.init(document.getElementById('marinemap'));
                                        myMarineMap.clear();//用于清除已存在的内容
                                        myMarineMap.showLoading();
                                        var marinetime = [], marplaceloss = [], marinestyle = [], marinecasualty = [], marplacejwdu = [];
                                        for (var i = 0; i < response.marinedlist.length; i++) {
                                            marinetime[i] = response.marinedlist[i].marinetime;
                                            marinestyle[i] = response.marinedlist[i].marinestyle;
                                            marinecasualty[i] = response.marinedlist[i].marinecasualty;
                                            marplaceloss[i + 1] = [response.marinedlist[i].marineplace, response.marinedlist[i].marineloss];
                                 ");
            WriteLiteral(@"           marplacejwdu[i] = [response.marinedlist[i].marinelogitude, response.marinedlist[i].marinedimension];
                                        }
                                        marplaceloss[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                })
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(marplaceloss);
                                        var marlongdimen = [];
     ");
            WriteLiteral(@"                                   for (var j = 0; j < marplacejwdu.length; j++) {
                                            marlongdimen[data[j].name] = marplacejwdu[j];
                                        }
                                        var geoCoordMap = marlongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                                if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                        //成为了[name 经度 维度 valu");
            WriteLiteral(@"e]的形式
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myMarineMap.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    return '<p style=""text-align:center;margin-bottom:0;"">' + e.name + '</p>发生时间：' + marinetime[e.dataIndex].replace(""T"", "" "") + '<br />灾害类型：' + marinestyle[e.dataIndex] + ""<br />经济损失："" + e.value[2] + "" 万元<br />伤亡人数："" + marinecasualty[e.dataIndex] + "" 人"";
                                                }
                                            },

                                  ");
            WriteLiteral(@"          bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
    ");
            WriteLiteral(@"                                                    'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',");
            WriteLiteral(@"
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color':");
            WriteLiteral(@" '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                            ");
            WriteLiteral(@"                            'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                            ");
            WriteLiteral(@"                            'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                          ");
            WriteLiteral(@"                                  'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                                    }]
                                                }
                                            },
                                            series: [
                                                {
                                                    name: '',
                                                    type: 'scatter',
                                                    symbolRotate: -1");
            WriteLiteral(@"80,
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return Math.sqrt(val[2]) / 2;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: false,
                                                    symbol: 'triangle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                                    itemStyle: {
                                                        normal: {");
            WriteLiteral(@"
                                                            color: '#1F67EA',
                                                            color: {
                                                                type: 'linear',
                                                                x: 0,                 // 左上角x
                                                                y: 0,                 // 左上角y
                                                                x2: 0,                // 右下角x
                                                                y2: 1,                // 右下角y
                                                                colorStops: [{
                                                                    offset: 0, color: 'rgba(5,23,250,0)' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(5,23,250,0.88)' // 100% 处的颜色
                       ");
            WriteLiteral(@"                                         }],
                                                                global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                                {
                                                    name: '',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return Math.sqrt(va");
            WriteLiteral(@"l[2]) / 2;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: {
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: false,
                                                    symbol: 'circle',//'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            position: 'inside',
                                                            textStyle: {
                                                                color: '#fff',
               ");
            WriteLiteral(@"                                                 fontSize: 10,
                                                            },
                                                            formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        },
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: 'rgba(5,23,250,1)',
                                                            color: {
                                                                type: 'radial',
                                                                x: 0.5,
                                                                y: 0.5,
                           ");
            WriteLiteral(@"                                     r: 0.5,
                                                                colorStops: [{
                                                                    offset: 0, color: 'rgba(118,126,242,1)' // 0% 处的颜色
                                                                }, {
                                                                    offset: 1, color: 'rgba(5,23,250,1)' // 100% 处的颜色
                                                                }],
                                                                global: false // 缺省为 false
                                                            },
                                                            shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                        ");
            WriteLiteral(@"    ]
                                        };
                                        myMarineMap.setOption(option);
                                    }
                                    function selectQuakeMap() {
                                        var myQuakeMap = echarts.init(document.getElementById('quakemap'));
                                        myQuakeMap.clear();//用于清除已存在的内容
                                        myQuakeMap.showLoading();
                                        var quaketime = [], quakeloss = [], quakecasualty = [], qkplaceloss = [], quakedepth = [], quakearea = [], qkplacejwdu = [];
                                        for (var i = 0; i < response.quakedlist.length; i++) {
                                            quaketime[i] = response.quakedlist[i].quaketime;
                                            quakedepth[i] = response.quakedlist[i].quakedepth;
                                            quakecasualty[i] = response.quakedlist[i].quakecasua");
            WriteLiteral(@"lty;
                                            quakeloss[i] = response.quakedlist[i].quakeloss;
                                            quakearea[i] = response.quakedlist[i].quakearea;
                                            qkplaceloss[i + 1] = [response.quakedlist[i].quakeplace, response.quakedlist[i].quakelevel];
                                            qkplacejwdu[i] = [response.quakedlist[i].quakelongitude, response.quakedlist[i].quakedimension];
                                        }
                                        qkplaceloss[0] = ['name', 'value'];
                                        function formatJson(source) {
                                            var json = source.slice(1).map(vals => {
                                                var obj = {};
                                                vals.forEach((val, index) => {
                                                    obj[source[0][index]] = val
                                                }");
            WriteLiteral(@")
                                                return obj;
                                            });
                                            return json
                                        }
                                        var data = formatJson(qkplaceloss);
                                        var qklongdimen = [];
                                        for (var j = 0; j < qkplacejwdu.length; j++) {
                                            qklongdimen[data[j].name] = qkplacejwdu[j];
                                        }
                                        var geoCoordMap = qklongdimen;
                                        var convertData = function (data) {
                                            var res = [];
                                            for (var k = 0; k < data.length; k++) {
                                                var geoCoord = geoCoordMap[data[k].name]; //根据data中的name作为键值读入地理坐标
                                          ");
            WriteLiteral(@"      if (geoCoord) {
                                                    res.push({
                                                        name: data[k].name,
                                                        value: geoCoord.concat(data[k].value) //将地理坐标与对应信息值衔接起来
                                                    });
                                                }
                                            }
                                            return res;
                                        };

                                        myQuakeMap.hideLoading();

                                        option = {
                                            tooltip: {
                                                trigger: 'item',
                                                formatter: function (e) {
                                                    //console.log(e)
                                                    return '<p style=""text-align:center;margin-bottom");
            WriteLiteral(@":0;"">' + e.name + '</p>发生时间：' + quaketime[e.dataIndex].replace(""T"", "" "") + '<br />经济损失：' + quakeloss[e.dataIndex] + "" 万元<br />地震级别："" + e.value[2] + "" 级<br />地震深度："" + quakedepth[e.dataIndex] + "" 千米<br />伤亡人数："" + quakecasualty[e.dataIndex] + "" 人<br />受灾面积："" + quakearea[e.dataIndex] + "" 公顷"";
                                                }
                                            },

                                            bmap: { //加载bmap组件：百度地图api的设置
                                                center: [108.282519, 23.9355], //地图准心：经纬度表示，在此以广西 古筹为中心点坐标
                                                zoom: 8, //地图缩放大小：越大越细致
                                                roam: true, //是否可拖拽等用户操作，可以只设置 'scale' 或者 'move'
                                                mapStyle: { //地图样式设置（各个指标的json定义）：具体到地图的陆地、海、铁路、主要交通干道、边界、绿化等
                                                    styleJson: [{
                                                        'featureType': 'water', //水域
              ");
            WriteLiteral(@"                                          'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#BDE3FD' //颜色
                                                        }
                                                    }, {
                                                        'featureType': 'land', //陆地
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#f3f3f3'
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路
                                                        'elementType': 'all',
                                                        'stylers': {
                  ");
            WriteLiteral(@"                                          'color': '#FDDC84',
                                                            'weight': 0.1
                                                        }
                                                    }, {
                                                        'featureType': 'highway', //高速路标签
                                                        'elementType': 'labels',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'arterial', //道路 干线
                                                        'elementType': 'geometry',
                                                        'stylers': {
                                                            'color': '#fefefe'
  ");
            WriteLiteral(@"                                                      }
                                                    }, {
                                                        'featureType': 'arterial',
                                                        'elementType': 'geometry.fill',
                                                        'stylers': {
                                                            'color': '#fefefe'
                                                        }
                                                    }, {
                                                        'featureType': 'poi', //感兴趣点
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                    ");
            WriteLiteral(@"                    'featureType': 'subway', //地铁
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'visibility': 'off'
                                                        }
                                                    }, {
                                                        'featureType': 'manmade', //人造
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'local',
                                                        'elementType': 'all',
                                ");
            WriteLiteral(@"                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'boundary',
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            //'color': '#989898'
                                                            'color': '#490202'
                                                        }
                                                    }, {
                                                        'featureType': 'district',  //行政区标签
                                                        'elementType': 'all',
                                                        'stylers': {
                                   ");
            WriteLiteral(@"                         'color': '#eeeeee'
                                                        }
                                                    }, {
                                                        'featureType': 'building', //建筑
                                                        'elementType': 'all',
                                                        'stylers': {
                                                            'color': '#d1d1d1'
                                                        }
                                                    }, {
                                                        'featureType': 'label', //标签字体填充
                                                        'elementType': 'labels.text.fill',
                                                        'stylers': {
                                                            'color': '#999999'
                                                        }
                                    ");
            WriteLiteral(@"                }]
                                                }
                                            },

                                            series: [
                                                {
                                                    name: '',
                                                    //type: 'effectScatter',
                                                    //type: 'heatmap',
                                                    type: 'scatter',
                                                    coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    symbolSize: function (val) {
                                                        return val[2] * 5;
                                                    },
                                                    showEffectOn: 'render',
                                                    rippleEffect: ");
            WriteLiteral(@"{
                                                        brushType: 'stroke'
                                                    },
                                                    hoverAnimation: false,
                                                    symbol: 'arrow',
                                                    itemStyle: {
                                                        normal: {
                                                            color: 'rgba(240,8,52,0.88)',
                                                            shadowBlur: 2,
                                                            shadowColor: '#333'
                                                        }
                                                    },
                                                },
                                                {
                                                    name: '',
                                                    type: 'scatter',
          ");
            WriteLiteral(@"                                          coordinateSystem: 'bmap',
                                                    data: convertData(data),
                                                    hoverAnimation: false,
                                                    symbolSize: function (val) {
                                                        return val[2] * 5;
                                                    },
                                                    symbolOffset: [0, '25%'],
                                                    label: {
                                                        normal: {
                                                            show: true,
                                                            textStyle: {
                                                                color: '#fff',
                                                                fontSize: 9,
                                                            },
          ");
            WriteLiteral(@"                                                  formatter(value) {
                                                                return value.data.value[2]
                                                            }
                                                        }
                                                    },
                                                    itemStyle: {
                                                        normal: {
                                                            color: 'rgba(255,0,0,1)',
                                                            //shadowBlur: 10,
                                                            //shadowColor: '#333'
                                                        }
                                                    },
                                                    zlevel: 1
                                                }
                                            ]
                          ");
            WriteLiteral(@"              };
                                        myQuakeMap.setOption(option);
                                    }
                                    switch (eightselect) {
                                        case ""农作物生物灾害"":
                                            selectCropMap();
                                            break;
                                        case ""森林生物灾害"":
                                            selectForestMap();
                                            break;
                                        case ""地质灾害"":
                                            selectGeologyMap();
                                            break;
                                        case ""森林火灾"":
                                            selectFireMap();
                                            break;
                                        case ""洪水灾害"":
                                            selectFloodMap();
                                     ");
            WriteLiteral(@"       break;
                                        case ""气象灾害"":
                                            selectMeteorologyMap();
                                            break;
                                        case ""海洋灾害"":
                                            selectMarineMap();
                                            break;
                                        case ""地震灾害"":
                                            selectQuakeMap();
                                            break;
                                        default:
                                            alert('暂无数据');
                                            break;
                                    }
                                }
                            })
                        })
                    }
                    ;
                }
            }
        }
    }
</script>
");
            EndContext();
            BeginContext(280393, 310, true);
            WriteLiteral(@"<script>
    function isLogin() {
        var oLogin = confirm(""请先登录"");
        if (oLogin == true) {
            location.href = ""/Account/Login"";
        } else {
            //window.location.reload();
            $(""#datablur"").blur();
            $(""#mapblur"").blur();
        }
    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
